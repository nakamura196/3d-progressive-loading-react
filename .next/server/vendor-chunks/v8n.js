"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/v8n";
exports.ids = ["vendor-chunks/v8n"];
exports.modules = {

/***/ "(ssr)/./node_modules/v8n/dist/v8n.esm.js":
/*!******************************************!*\
  !*** ./node_modules/v8n/dist/v8n.esm.js ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\nvar Rule = function Rule(name, fn, args, modifiers) {\n  this.name = name;\n  this.fn = fn;\n  this.args = args;\n  this.modifiers = modifiers;\n};\n\nRule.prototype._test = function _test (value) {\n  var fn = this.fn;\n\n  try {\n    testAux(this.modifiers.slice(), fn, this)(value);\n  } catch (ex) {\n    fn = function () { return false; };\n  }\n\n  try {\n    return testAux(this.modifiers.slice(), fn, this)(value);\n  } catch (ex$1) {\n    return false;\n  }\n};\n\nRule.prototype._check = function _check (value) {\n  try {\n    testAux(this.modifiers.slice(), this.fn, this)(value);\n  } catch (ex) {\n    if (testAux(this.modifiers.slice(), function (it) { return it; }, this)(false)) {\n      return;\n    }\n  }\n\n  if (!testAux(this.modifiers.slice(), this.fn, this)(value)) {\n    throw null;\n  }\n};\n\nRule.prototype._testAsync = function _testAsync (value) {\n    var this$1 = this;\n\n  return new Promise(function (resolve, reject) {\n    testAsyncAux(\n      this$1.modifiers.slice(),\n      this$1.fn,\n      this$1\n    )(value)\n      .then(function (valid) {\n        if (valid) {\n          resolve(value);\n        } else {\n          reject(null);\n        }\n      })\n      .catch(function (ex) { return reject(ex); });\n  });\n};\n\nfunction pickFn(fn, variant) {\n  if ( variant === void 0 ) variant = 'simple';\n\n  return typeof fn === 'object' ? fn[variant] : fn;\n}\n\nfunction testAux(modifiers, fn, rule) {\n  if (modifiers.length) {\n    var modifier = modifiers.shift();\n    var nextFn = testAux(modifiers, fn, rule);\n    return modifier.perform(nextFn, rule);\n  } else {\n    return pickFn(fn);\n  }\n}\n\nfunction testAsyncAux(modifiers, fn, rule) {\n  if (modifiers.length) {\n    var modifier = modifiers.shift();\n    var nextFn = testAsyncAux(modifiers, fn, rule);\n    return modifier.performAsync(nextFn, rule);\n  } else {\n    return function (value) { return Promise.resolve(pickFn(fn, 'async')(value)); };\n  }\n}\n\nvar Modifier = function Modifier(name, perform, performAsync) {\n  this.name = name;\n  this.perform = perform;\n  this.performAsync = performAsync;\n};\n\nvar ValidationError = /*@__PURE__*/(function (Error) {\n  function ValidationError(rule, value, cause, target) {\n    var remaining = [], len = arguments.length - 4;\n    while ( len-- > 0 ) remaining[ len ] = arguments[ len + 4 ];\n\n    Error.call(this, remaining);\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, ValidationError);\n    }\n    this.rule = rule;\n    this.value = value;\n    this.cause = cause;\n    this.target = target;\n  }\n\n  if ( Error ) ValidationError.__proto__ = Error;\n  ValidationError.prototype = Object.create( Error && Error.prototype );\n  ValidationError.prototype.constructor = ValidationError;\n\n  return ValidationError;\n}(Error));\n\nvar Context = function Context(chain, nextRuleModifiers) {\n  if ( chain === void 0 ) chain = [];\n  if ( nextRuleModifiers === void 0 ) nextRuleModifiers = [];\n\n  this.chain = chain;\n  this.nextRuleModifiers = nextRuleModifiers;\n};\n\nContext.prototype._applyRule = function _applyRule (ruleFn, name) {\n    var this$1 = this;\n\n  return function () {\n      var args = [], len = arguments.length;\n      while ( len-- ) args[ len ] = arguments[ len ];\n\n    this$1.chain.push(\n      new Rule(name, ruleFn.apply(this$1, args), args, this$1.nextRuleModifiers)\n    );\n    this$1.nextRuleModifiers = [];\n    return this$1;\n  };\n};\n\nContext.prototype._applyModifier = function _applyModifier (modifier, name) {\n  this.nextRuleModifiers.push(\n    new Modifier(name, modifier.simple, modifier.async)\n  );\n  return this;\n};\n\nContext.prototype._clone = function _clone () {\n  return new Context(this.chain.slice(), this.nextRuleModifiers.slice());\n};\n\nContext.prototype.test = function test (value) {\n  return this.chain.every(function (rule) { return rule._test(value); });\n};\n\nContext.prototype.testAll = function testAll (value) {\n  var err = [];\n  this.chain.forEach(function (rule) {\n    try {\n      rule._check(value);\n    } catch (ex) {\n      err.push(new ValidationError(rule, value, ex));\n    }\n  });\n  return err;\n};\n\nContext.prototype.check = function check (value) {\n  this.chain.forEach(function (rule) {\n    try {\n      rule._check(value);\n    } catch (ex) {\n      throw new ValidationError(rule, value, ex);\n    }\n  });\n};\n\nContext.prototype.testAsync = function testAsync (value) {\n    var this$1 = this;\n\n  return new Promise(function (resolve, reject) {\n    executeAsyncRules(value, this$1.chain.slice(), resolve, reject);\n  });\n};\n\nfunction executeAsyncRules(value, rules, resolve, reject) {\n  if (rules.length) {\n    var rule = rules.shift();\n    rule._testAsync(value).then(\n      function () {\n        executeAsyncRules(value, rules, resolve, reject);\n      },\n      function (cause) {\n        reject(new ValidationError(rule, value, cause));\n      }\n    );\n  } else {\n    resolve(value);\n  }\n}\n\nvar consideredEmpty = function (value, considerTrimmedEmptyString) {\n  if (\n    considerTrimmedEmptyString &&\n    typeof value === 'string' &&\n    value.trim().length === 0\n  ) {\n    return true;\n  }\n\n  return value === undefined || value === null;\n};\n\nfunction optional (validation, considerTrimmedEmptyString) {\n  if ( considerTrimmedEmptyString === void 0 ) considerTrimmedEmptyString = false;\n\n  return ({\n  simple: function (value) { return consideredEmpty(value, considerTrimmedEmptyString) ||\n    validation.check(value) === undefined; },\n  async: function (value) { return consideredEmpty(value, considerTrimmedEmptyString) ||\n    validation.testAsync(value); },\n});\n}\n\nfunction v8n() {\n  return typeof Proxy !== 'undefined'\n    ? proxyContext(new Context())\n    : proxylessContext(new Context());\n}\n\n// Custom rules\nvar customRules = {};\n\nv8n.extend = function(newRules) {\n  Object.assign(customRules, newRules);\n};\n\nv8n.clearCustomRules = function() {\n  customRules = {};\n};\n\nfunction proxyContext(context) {\n  return new Proxy(context, {\n    get: function get(obj, prop) {\n      if (prop in obj) {\n        return obj[prop];\n      }\n\n      var newContext = proxyContext(context._clone());\n\n      if (prop in availableModifiers) {\n        return newContext._applyModifier(availableModifiers[prop], prop);\n      }\n      if (prop in customRules) {\n        return newContext._applyRule(customRules[prop], prop);\n      }\n      if (prop in availableRules) {\n        return newContext._applyRule(availableRules[prop], prop);\n      }\n    },\n  });\n}\n\nfunction proxylessContext(context) {\n  var addRuleSet = function (ruleSet, targetContext) {\n    Object.keys(ruleSet).forEach(function (prop) {\n      targetContext[prop] = function () {\n        var args = [], len = arguments.length;\n        while ( len-- ) args[ len ] = arguments[ len ];\n\n        var newContext = proxylessContext(targetContext._clone());\n        var contextWithRuleApplied = newContext._applyRule(\n          ruleSet[prop],\n          prop\n        ).apply(void 0, args);\n        return contextWithRuleApplied;\n      };\n    });\n    return targetContext;\n  };\n\n  var contextWithAvailableRules = addRuleSet(availableRules, context);\n  var contextWithAllRules = addRuleSet(\n    customRules,\n    contextWithAvailableRules\n  );\n\n  Object.keys(availableModifiers).forEach(function (prop) {\n    Object.defineProperty(contextWithAllRules, prop, {\n      get: function () {\n        var newContext = proxylessContext(contextWithAllRules._clone());\n        return newContext._applyModifier(availableModifiers[prop], prop);\n      },\n    });\n  });\n\n  return contextWithAllRules;\n}\n\nvar availableModifiers = {\n  not: {\n    simple: function (fn) { return function (value) { return !fn(value); }; },\n    async: function (fn) { return function (value) { return Promise.resolve(fn(value))\n        .then(function (result) { return !result; })\n        .catch(function () { return true; }); }; },\n  },\n\n  some: {\n    simple: function (fn) { return function (value) {\n      return split(value).some(function (item) {\n        try {\n          return fn(item);\n        } catch (ex) {\n          return false;\n        }\n      });\n    }; },\n    async: function (fn) { return function (value) {\n      return Promise.all(\n        split(value).map(function (item) {\n          try {\n            return fn(item).catch(function () { return false; });\n          } catch (ex) {\n            return false;\n          }\n        })\n      ).then(function (result) { return result.some(Boolean); });\n    }; },\n  },\n\n  every: {\n    simple: function (fn) { return function (value) { return value !== false && split(value).every(fn); }; },\n    async: function (fn) { return function (value) { return Promise.all(split(value).map(fn)).then(function (result) { return result.every(Boolean); }); }; },\n  },\n\n  strict: {\n    simple: function (fn, rule) { return function (value) {\n      if (isSchemaRule(rule) && value && typeof value === 'object') {\n        return (\n          Object.keys(rule.args[0]).length === Object.keys(value).length &&\n          fn(value)\n        );\n      }\n      return fn(value);\n    }; },\n    async: function (fn, rule) { return function (value) { return Promise.resolve(fn(value))\n        .then(function (result) {\n          if (isSchemaRule(rule) && value && typeof value === 'object') {\n            return (\n              Object.keys(rule.args[0]).length === Object.keys(value).length &&\n              result\n            );\n          }\n          return result;\n        })\n        .catch(function () { return false; }); }; },\n  },\n};\n\nfunction isSchemaRule(rule) {\n  return (\n    rule &&\n    rule.name === 'schema' &&\n    rule.args.length > 0 &&\n    typeof rule.args[0] === 'object'\n  );\n}\n\nfunction split(value) {\n  if (typeof value === 'string') {\n    return value.split('');\n  }\n  return value;\n}\n\nvar availableRules = {\n  // Value\n\n  equal: function (expected) { return function (value) { return value == expected; }; },\n\n  exact: function (expected) { return function (value) { return value === expected; }; },\n\n  // Types\n\n  number: function (allowInfinite) {\n    if ( allowInfinite === void 0 ) allowInfinite = true;\n\n    return function (value) { return typeof value === 'number' && (allowInfinite || isFinite(value)); };\n},\n\n  integer: function () { return function (value) {\n    var isInteger = Number.isInteger || isIntegerPolyfill;\n    return isInteger(value);\n  }; },\n\n  numeric: function () { return function (value) { return !isNaN(parseFloat(value)) && isFinite(value); }; },\n\n  string: function () { return testType('string'); },\n\n  boolean: function () { return testType('boolean'); },\n\n  undefined: function () { return testType('undefined'); },\n\n  null: function () { return testType('null'); },\n\n  array: function () { return testType('array'); },\n\n  object: function () { return testType('object'); },\n\n  instanceOf: function (instance) { return function (value) { return value instanceof instance; }; },\n\n  // Pattern\n\n  pattern: function (expected) { return function (value) { return expected.test(value); }; },\n\n  lowercase: function () { return function (value) {\n    return (\n      typeof value === 'boolean' ||\n      (value === value.toLowerCase() && value.trim() !== '')\n    );\n  }; },\n\n  uppercase: function () { return function (value) { return value === value.toUpperCase() && value.trim() !== ''; }; },\n\n  vowel: function () { return function (value) { return /^[aeiou]+$/i.test(value); }; },\n\n  consonant: function () { return function (value) { return /^(?=[^aeiou])([a-z]+)$/i.test(value); }; },\n\n  // Value at\n\n  first: function (expected) { return function (value) { return value[0] == expected; }; },\n\n  last: function (expected) { return function (value) { return value[value.length - 1] == expected; }; },\n\n  // Length\n\n  empty: function () { return function (value) { return value.length === 0; }; },\n\n  length: function (min, max) { return function (value) { return value.length >= min && value.length <= (max || min); }; },\n\n  minLength: function (min) { return function (value) { return value.length >= min; }; },\n\n  maxLength: function (max) { return function (value) { return value.length <= max; }; },\n\n  // Range\n\n  negative: function () { return function (value) { return value < 0; }; },\n\n  positive: function () { return function (value) { return value >= 0; }; },\n\n  between: function (a, b) { return function (value) { return value >= a && value <= b; }; },\n\n  range: function (a, b) { return function (value) { return value >= a && value <= b; }; },\n\n  lessThan: function (n) { return function (value) { return value < n; }; },\n\n  lessThanOrEqual: function (n) { return function (value) { return value <= n; }; },\n\n  greaterThan: function (n) { return function (value) { return value > n; }; },\n\n  greaterThanOrEqual: function (n) { return function (value) { return value >= n; }; },\n\n  // Divisible\n\n  even: function () { return function (value) { return value % 2 === 0; }; },\n\n  odd: function () { return function (value) { return value % 2 !== 0; }; },\n\n  includes: function (expected) { return function (value) { return ~value.indexOf(expected); }; },\n\n  schema: function (schema) { return testSchema(schema); },\n\n  // branching\n\n  passesAnyOf: function () {\n    var validations = [], len = arguments.length;\n    while ( len-- ) validations[ len ] = arguments[ len ];\n\n    return function (value) { return validations.some(function (validation) { return validation.test(value); }); };\n},\n\n  optional: optional,\n};\n\nfunction testType(expected) {\n  return function (value) {\n    return (\n      (Array.isArray(value) && expected === 'array') ||\n      (value === null && expected === 'null') ||\n      typeof value === expected\n    );\n  };\n}\n\nfunction isIntegerPolyfill(value) {\n  return (\n    typeof value === 'number' && isFinite(value) && Math.floor(value) === value\n  );\n}\n\nfunction testSchema(schema) {\n  return {\n    simple: function (value) {\n      var causes = [];\n      Object.keys(schema).forEach(function (key) {\n        var nestedValidation = schema[key];\n        try {\n          nestedValidation.check((value || {})[key]);\n        } catch (ex) {\n          ex.target = key;\n          causes.push(ex);\n        }\n      });\n      if (causes.length > 0) {\n        throw causes;\n      }\n      return true;\n    },\n    async: function (value) {\n      var causes = [];\n      var nested = Object.keys(schema).map(function (key) {\n        var nestedValidation = schema[key];\n        return nestedValidation.testAsync((value || {})[key]).catch(function (ex) {\n          ex.target = key;\n          causes.push(ex);\n        });\n      });\n      return Promise.all(nested).then(function () {\n        if (causes.length > 0) {\n          throw causes;\n        }\n\n        return true;\n      });\n    },\n  };\n}\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (v8n);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/v8n/dist/v8n.esm.js\n");

/***/ })

};
;